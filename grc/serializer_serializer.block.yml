id: serializer_serializer
label: serializer
category: '[serializer]'

templates:
  imports: from gnuradio import serializer
  make: serializer.serializer(${device},${board},${mode},${samp_rate})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
#- id: ...
#  label: ...
#  dtype: ...

asserts:
- ${ ((samp_rate==0) or (samp_rate==8000) or(samp_rate==11025) or (samp_rate==16000) or (samp_rate==22050)or (samp_rate==24000) or (samp_rate==32000) or (samp_rate==44000) or (samp_rate==48000)) }

parameters:
- id: device
  label: Device
  dtype: string


- id: board
  label: Board Detection
  default: "False"
  options: [True, False]
  option_labels: ["Enabled","Disabled"]

- id: mode
  label: Mode
  dtype: string
  default: "data"
  options: [data, detector]
  option_labels: ["Data","Detector"]

-   id: samp_rate
    label: Sample Rate
    dtype: int
    default: samp_rate
    options: ['8000','11025','16000','22050','24000','32000','44100','48000']
    option_labels: [8 kHz, 11.025 kHz, 16 kHz , 22.05 kHz, 24 kHz, 32 kHz ,44.1 kHz, 48 kHz]

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: data 
#  domain: ...
  dtype: float
#  vlen: ...
#  optional: ...
#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
